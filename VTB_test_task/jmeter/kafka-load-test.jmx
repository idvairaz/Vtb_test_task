<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.6.2">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan" enabled="true">
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.tearDown_on_shutdown">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
    </TestPlan>
    <hashTree>
      <kg.apc.jmeter.threads.UltimateThreadGroup guiclass="kg.apc.jmeter.threads.UltimateThreadGroupGui" testclass="kg.apc.jmeter.threads.UltimateThreadGroup" testname="jp@gc - Ultimate Thread Group" enabled="true">
        <collectionProp name="ultimatethreadgroupdata">
          <collectionProp name="1835098219">
            <stringProp name="53">5</stringProp>
            <stringProp name="0">0</stringProp>
            <stringProp name="1722">60</stringProp>
            <stringProp name="1509345">1200</stringProp>
            <stringProp name="48">0</stringProp>
          </collectionProp>
          <collectionProp name="1248537102">
            <stringProp name="53">5</stringProp>
            <stringProp name="50547">300</stringProp>
            <stringProp name="1722">60</stringProp>
            <stringProp name="56313">900</stringProp>
            <stringProp name="48">0</stringProp>
          </collectionProp>
          <collectionProp name="-244791053">
            <stringProp name="50">2</stringProp>
            <stringProp name="53430">600</stringProp>
            <stringProp name="1722">60</stringProp>
            <stringProp name="53430">600</stringProp>
            <stringProp name="48">0</stringProp>
          </collectionProp>
          <collectionProp name="-1656009508">
            <stringProp name="50">2</stringProp>
            <stringProp name="56313">900</stringProp>
            <stringProp name="1722">60</stringProp>
            <stringProp name="50547">300</stringProp>
            <stringProp name="48">0</stringProp>
          </collectionProp>
        </collectionProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <intProp name="LoopController.loops">-1</intProp>
          <boolProp name="LoopController.continue_forever">false</boolProp>
        </elementProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
      </kg.apc.jmeter.threads.UltimateThreadGroup>
      <hashTree>
        <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <intProp name="LoopController.loops">-1</intProp>
        </LoopController>
        <hashTree>
          <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="SR223 PreProcessor (Generate Kafka Msg)" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import java.util.UUID
import groovy.json.JsonOutput
import java.util.concurrent.atomic.AtomicLong

def globalCounter = vars.getObject(&quot;globalMessageCounter&quot;)
if (globalCounter == null) {
    globalCounter = new AtomicLong(0)
    vars.putObject(&quot;globalMessageCounter&quot;, globalCounter)
}

def msgUuid = UUID.randomUUID().toString()

def counter = globalCounter.incrementAndGet()

def head = (counter % 10 != 0)

def message = [
    &quot;msg_uuid&quot;: msgUuid,
    &quot;head&quot;: head,
    &quot;method&quot;: &quot;POST&quot;, 
    &quot;uri&quot;: &quot;/post-message&quot;
]

def jsonMessage = JsonOutput.toJson(message)


vars.put(&quot;kafkaMessage&quot;, jsonMessage)
vars.put(&quot;msgUuid&quot;, msgUuid)


if (counter % 100 == 0) {
    log.info(&quot;Generated message #${counter}: head=${head}&quot;)
} else if (!head) {
    log.info(&quot;10th message #${counter}: head=${head}&quot;)
}</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223PreProcessor>
          <hashTree/>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="JSR223 Sampler (Send to Kafka)" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import org.apache.kafka.clients.producer.*
import java.util.Properties

def kafkaProducer = vars.getObject(&quot;kafkaProducer&quot;)

if (kafkaProducer == null) {
    def props = new Properties()
    props.put(&quot;bootstrap.servers&quot;, &quot;localhost:9092&quot;)  
    props.put(&quot;key.serializer&quot;, &quot;org.apache.kafka.common.serialization.StringSerializer&quot;)
    props.put(&quot;value.serializer&quot;, &quot;org.apache.kafka.common.serialization.StringSerializer&quot;)
    props.put(&quot;acks&quot;, &quot;1&quot;) 
    props.put(&quot;request.timeout.ms&quot;, &quot;30000&quot;)
    props.put(&quot;delivery.timeout.ms&quot;, &quot;45000&quot;)
    
    kafkaProducer = new KafkaProducer&lt;String, String&gt;(props)
    vars.putObject(&quot;kafkaProducer&quot;, kafkaProducer)
}

try {
    def key = vars.get(&quot;msgUuid&quot;)
    def message = vars.get(&quot;kafkaMessage&quot;)
    
    def record = new ProducerRecord&lt;&gt;(&quot;test-topic&quot;, key, message)
    def future = kafkaProducer.send(record)
    
    def metadata = future.get(10, java.util.concurrent.TimeUnit.SECONDS)
    
    return &quot;SUCCESS: Partition &quot; + metadata.partition()
    
} catch (java.util.concurrent.TimeoutException e) {
    log.warn(&quot;Timeout sending message, but it might still be delivered&quot;)
    return &quot;TIMEOUT: &quot; + e.getMessage()
} catch (java.lang.InterruptedException e) {
    log.warn(&quot;Interrupted while sending message&quot;)
    Thread.currentThread().interrupt() // restore interrupt status
    return &quot;INTERRUPTED&quot;
} catch (Exception e) {
    log.error(&quot;Failed to send message to Kafka: &quot; + e.getMessage())
    return &quot;ERROR: &quot; + e.getMessage()
}</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="TestPlan.comments">Kafka Producer не нашелся, поэтому взяла  JSR223 Sampler</stringProp>
          </JSR223Sampler>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="SummaryReport" testclass="ResultCollector" testname="Summary Report" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="StatVisualizer" testclass="ResultCollector" testname="Aggregate Report" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
